const UserRegister = require("../../model/auth/register");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const UserLogin = require("../../model/auth/login");
const emailVerification = require('../../verification/verification')

const multer = require("multer");
const upload = multer(); // Configure multer if needed

const nodemailer = require('nodemailer')


const transporter = nodemailer.createTransport({
    host: "sandbox.smtp.mailtrap.io",
    port: "2525",
    secureConnection: "false",
    auth: {
        user: "ca089139e7a956",
        pass: "2b00c2db97e280"
    }
})

// generate token
const generateToken = (id) => {
    return jwt.sign({ id }, process.env.JWT_SECRET, {
        expiresIn: "30d",
    });
};

const registerUser = async (req, res, next) => {
    // console.log("Received request body:", req.body);
    try {
        const {
            email,
            password,
            name,
            phoneNumber,
        } = req.body;
        if (!email) {
            return res.status(400).json({ message: "Please add all fields" });
        }

        const userExists = await UserRegister.findOne({ email });
        if (userExists) {
            res
                .status(400)
                .json({ success: false, message: "User already exists" });
        } else {
            const hashedPassword = await bcrypt.hash(password, 10);
            //  const hashedConfirmPassword = await bcrypt.hash(confirmPassword, 10);
            const newUser = new UserRegister({
                email,
                password: hashedPassword,
                name,
                phone: phoneNumber,
            });
            const user = await newUser.save();
            if (user) {
                return res
                    .status(200)
                    .json({
                        success: true,
                        message: "User Registered Successfully",
                        data: user,
                        _id: user._id,
                        token: generateToken(user._id),
                        message: "User Registered Successfully",
                        redirect: "Dashboard",
                    });
            } else {
                res
                    .status(400)
                    .json({ success: false, message: "something went Wrong" });
                throw new Error("Invalid user data");
            }
        }
    } catch (error) {
        next(error);
        res
            .status(500)
            .json({ success: false, message: "Internal Server Error", error: error });
    }

};